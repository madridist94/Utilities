import re                      # Импортируем модуль регулярных выражений
import PySimpleGUI as sg       # Импортируем модуль для создания простого графического интерфейса
import pyperclip               # Импортируем модуль для работы с буфером обмена

# Функция для извлечения артикулов из текста с использованием регулярного выражения
def extract_articles(text):
    regex = r"(?<!\d)[1-9]{1}[0-9]{5,7}(?!\d)"
    return re.findall(regex, text)

def main():
    sg.theme("DarkAmber")      # Устанавливаем тему для окна

    # Создаем макет окна, который состоит из виджетов (элементов интерфейса)
    layout = [
        # Виджет текста с подсказкой для ввода текста с артикулами
        [sg.Text("Введите текст с артикулами:")],
        # Виджет многострочного текстового поля с размерами 60x10 и ключом для доступа к его значениям
        [sg.Multiline(size=(60, 10), key="-INPUT-")],
        # Виджеты кнопок: вставить текст из буфера обмена, извлечь артикулы и очистить текстовое поле
        [sg.Button("Вставить текст", key="-PASTE-"), sg.Button("Извлечь артикулы"), sg.Button("Очистить")],
        # Виджет текста с подписью "Артикулы через запятую:"
        [sg.Text("Артикулы через запятую:")],
        # Виджет многострочного текстового поля с размерами 60x5 и ключом для доступа к его значениям
        [sg.Multiline(size=(60, 5), key="-OUTPUT1-")],
        # Виджет кнопки "Копировать" для копирования артикулов через запятую в буфер обмена
        [sg.Button("Копировать", key="-COPY1-")],
        # Виджет текста с подписью "Артикулы в столбик:"
        [sg.Text("Артикулы в столбик:")],
        # Виджет многострочного текстового поля с размерами 60x5 и ключом для доступа к его значениям
        [sg.Multiline(size=(60, 5), key="-OUTPUT2-")],
        # Виджет кнопки "Копировать" для копирования артикулов в столбик в буфер обмена
        [sg.Button("Копировать", key="-COPY2-")],
    ]

    # Создаем окно с заданным макетом
    window = sg.Window("Извлечение артикулов", layout, return_keyboard_events=True, use_default_focus=False)

    # Цикл обработки событий окна
    while True:
        # Чтение событий и значений из окна
        event, values = window.read()

        # Если пользователь закрыл окно, прерываем цикл
        if event == sg.WIN_CLOSED:
            break
        # Если пользователь нажал кнопку "Извлечь артикулы"
        if event == "Извлечь артикулы":
            # Извлечение артикулов из введенного текста
            articles = extract_articles(values["-INPUT-"])
            # Обновление виджетов с артикулами через запятую и в столбик
            window["-OUTPUT1-"].update(", ".join(articles))
            window["-OUTPUT2-"].update("\n".join(articles))
        # Если пользователь нажал кнопку "Копировать" для артикулов через запятую
        elif event == "-COPY1-":
            # Копирование артикулов через запятую в буфер обмена
            pyperclip.copy(window["-OUTPUT1-"].get())
        # Если пользователь нажал кнопку "Копировать" для артикулов в столбик
        elif event == "-COPY2-":
            # Копирование артикулов в столбик в буфер обмена
            pyperclip.copy(window["-OUTPUT2-"].get())
        # Если пользователь нажал кнопку "Очистить"
        elif event == "Очистить":
            # Очистка текстового поля для ввода
            window["-INPUT-"].update("")
        # Если пользователь нажал сочетание клавиш Ctrl+V или кнопку "Вставить текст"
        elif event == "^V" or event == "^в" or event == "-PASTE-":
            # Получение текущего текста текстового поля
            current_text = window["-INPUT-"].get()
            # Вставка текста из буфера обмена
            new_text = pyperclip.paste()
            # Обновление текстового поля с добавлением нового текста
            window["-INPUT-"].update(current_text + new_text)

    window.close()              # Закрываем окно после выхода из цикла

if __name__ == "__main__":
    main()
